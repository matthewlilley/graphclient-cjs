import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import type { GetMeshOptions } from '@graphql-mesh/runtime';
import type { YamlConfig } from '@graphql-mesh/types';
import { MeshHTTPHandler } from '@graphql-mesh/http';
import { ExecuteMeshFn, SubscribeMeshFn, MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import type { LegacyTypes } from './sources/legacy/types';
export declare type Maybe<T> = T | null;
export declare type InputMaybe<T> = Maybe<T>;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export declare type RequireFields<T, K extends keyof T> = Omit<T, K> & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    BigDecimal: any;
    BigInt: any;
    Bytes: any;
};
export declare type BlockChangedFilter = {
    number_gte: Scalars['Int'];
};
export declare type Block_height = {
    hash?: InputMaybe<Scalars['Bytes']>;
    number?: InputMaybe<Scalars['Int']>;
    number_gte?: InputMaybe<Scalars['Int']>;
};
export declare type Bundle = {
    id: Scalars['ID'];
    ethPrice: Scalars['BigDecimal'];
};
export declare type Bundle_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    ethPrice?: InputMaybe<Scalars['BigDecimal']>;
    ethPrice_not?: InputMaybe<Scalars['BigDecimal']>;
    ethPrice_gt?: InputMaybe<Scalars['BigDecimal']>;
    ethPrice_lt?: InputMaybe<Scalars['BigDecimal']>;
    ethPrice_gte?: InputMaybe<Scalars['BigDecimal']>;
    ethPrice_lte?: InputMaybe<Scalars['BigDecimal']>;
    ethPrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    ethPrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Bundle_orderBy = 'id' | 'ethPrice';
export declare type Burn = {
    id: Scalars['ID'];
    transaction: Transaction;
    timestamp: Scalars['BigInt'];
    pair: Pair;
    liquidity: Scalars['BigDecimal'];
    sender?: Maybe<Scalars['Bytes']>;
    amount0?: Maybe<Scalars['BigDecimal']>;
    amount1?: Maybe<Scalars['BigDecimal']>;
    to?: Maybe<Scalars['Bytes']>;
    logIndex?: Maybe<Scalars['BigInt']>;
    amountUSD?: Maybe<Scalars['BigDecimal']>;
    complete: Scalars['Boolean'];
    feeTo?: Maybe<Scalars['Bytes']>;
    feeLiquidity?: Maybe<Scalars['BigDecimal']>;
};
export declare type Burn_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    transaction?: InputMaybe<Scalars['String']>;
    transaction_not?: InputMaybe<Scalars['String']>;
    transaction_gt?: InputMaybe<Scalars['String']>;
    transaction_lt?: InputMaybe<Scalars['String']>;
    transaction_gte?: InputMaybe<Scalars['String']>;
    transaction_lte?: InputMaybe<Scalars['String']>;
    transaction_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_contains?: InputMaybe<Scalars['String']>;
    transaction_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_contains?: InputMaybe<Scalars['String']>;
    transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_starts_with?: InputMaybe<Scalars['String']>;
    transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_ends_with?: InputMaybe<Scalars['String']>;
    transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_?: InputMaybe<Transaction_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Pair_filter>;
    liquidity?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    sender?: InputMaybe<Scalars['Bytes']>;
    sender_not?: InputMaybe<Scalars['Bytes']>;
    sender_in?: InputMaybe<Array<Scalars['Bytes']>>;
    sender_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    sender_contains?: InputMaybe<Scalars['Bytes']>;
    sender_not_contains?: InputMaybe<Scalars['Bytes']>;
    amount0?: InputMaybe<Scalars['BigDecimal']>;
    amount0_not?: InputMaybe<Scalars['BigDecimal']>;
    amount0_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount0_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount0_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount0_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1?: InputMaybe<Scalars['BigDecimal']>;
    amount1_not?: InputMaybe<Scalars['BigDecimal']>;
    amount1_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount1_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount1_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount1_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    to?: InputMaybe<Scalars['Bytes']>;
    to_not?: InputMaybe<Scalars['Bytes']>;
    to_in?: InputMaybe<Array<Scalars['Bytes']>>;
    to_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    to_contains?: InputMaybe<Scalars['Bytes']>;
    to_not_contains?: InputMaybe<Scalars['Bytes']>;
    logIndex?: InputMaybe<Scalars['BigInt']>;
    logIndex_not?: InputMaybe<Scalars['BigInt']>;
    logIndex_gt?: InputMaybe<Scalars['BigInt']>;
    logIndex_lt?: InputMaybe<Scalars['BigInt']>;
    logIndex_gte?: InputMaybe<Scalars['BigInt']>;
    logIndex_lte?: InputMaybe<Scalars['BigInt']>;
    logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    complete?: InputMaybe<Scalars['Boolean']>;
    complete_not?: InputMaybe<Scalars['Boolean']>;
    complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
    complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    feeTo?: InputMaybe<Scalars['Bytes']>;
    feeTo_not?: InputMaybe<Scalars['Bytes']>;
    feeTo_in?: InputMaybe<Array<Scalars['Bytes']>>;
    feeTo_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    feeTo_contains?: InputMaybe<Scalars['Bytes']>;
    feeTo_not_contains?: InputMaybe<Scalars['Bytes']>;
    feeLiquidity?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    feeLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Burn_orderBy = 'id' | 'transaction' | 'timestamp' | 'pair' | 'liquidity' | 'sender' | 'amount0' | 'amount1' | 'to' | 'logIndex' | 'amountUSD' | 'complete' | 'feeTo' | 'feeLiquidity';
export declare type DayData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    factory: Factory;
    volumeETH: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    untrackedVolume: Scalars['BigDecimal'];
    liquidityETH: Scalars['BigDecimal'];
    liquidityUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type DayData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Factory_filter>;
    volumeETH?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolume?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_not?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_gt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_lt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_gte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_lte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type DayData_orderBy = 'id' | 'date' | 'factory' | 'volumeETH' | 'volumeUSD' | 'untrackedVolume' | 'liquidityETH' | 'liquidityUSD' | 'txCount';
export declare type Factory = {
    id: Scalars['ID'];
    pairCount: Scalars['BigInt'];
    volumeUSD: Scalars['BigDecimal'];
    volumeETH: Scalars['BigDecimal'];
    untrackedVolumeUSD: Scalars['BigDecimal'];
    liquidityUSD: Scalars['BigDecimal'];
    liquidityETH: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
    tokenCount: Scalars['BigInt'];
    userCount: Scalars['BigInt'];
    pairs: Array<Pair>;
    tokens: Array<Token>;
    hourData: Array<HourData>;
    dayData: Array<DayData>;
};
export declare type FactorypairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Pair_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Pair_filter>;
};
export declare type FactorytokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Token_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Token_filter>;
};
export declare type FactoryhourDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<HourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<HourData_filter>;
};
export declare type FactorydayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<DayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<DayData_filter>;
};
export declare type Factory_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    pairCount?: InputMaybe<Scalars['BigInt']>;
    pairCount_not?: InputMaybe<Scalars['BigInt']>;
    pairCount_gt?: InputMaybe<Scalars['BigInt']>;
    pairCount_lt?: InputMaybe<Scalars['BigInt']>;
    pairCount_gte?: InputMaybe<Scalars['BigInt']>;
    pairCount_lte?: InputMaybe<Scalars['BigInt']>;
    pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    tokenCount?: InputMaybe<Scalars['BigInt']>;
    tokenCount_not?: InputMaybe<Scalars['BigInt']>;
    tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
    tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
    tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
    tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
    tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    userCount?: InputMaybe<Scalars['BigInt']>;
    userCount_not?: InputMaybe<Scalars['BigInt']>;
    userCount_gt?: InputMaybe<Scalars['BigInt']>;
    userCount_lt?: InputMaybe<Scalars['BigInt']>;
    userCount_gte?: InputMaybe<Scalars['BigInt']>;
    userCount_lte?: InputMaybe<Scalars['BigInt']>;
    userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pairs_?: InputMaybe<Pair_filter>;
    tokens_?: InputMaybe<Token_filter>;
    hourData_?: InputMaybe<HourData_filter>;
    dayData_?: InputMaybe<DayData_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Factory_orderBy = 'id' | 'pairCount' | 'volumeUSD' | 'volumeETH' | 'untrackedVolumeUSD' | 'liquidityUSD' | 'liquidityETH' | 'txCount' | 'tokenCount' | 'userCount' | 'pairs' | 'tokens' | 'hourData' | 'dayData';
export declare type HourData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    factory: Factory;
    volumeETH: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    untrackedVolume: Scalars['BigDecimal'];
    liquidityETH: Scalars['BigDecimal'];
    liquidityUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type HourData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Factory_filter>;
    volumeETH?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolume?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_not?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_gt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_lt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_gte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_lte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type HourData_orderBy = 'id' | 'date' | 'factory' | 'volumeETH' | 'volumeUSD' | 'untrackedVolume' | 'liquidityETH' | 'liquidityUSD' | 'txCount';
export declare type LiquidityPosition = {
    id: Scalars['ID'];
    user: User;
    pair: Pair;
    liquidityTokenBalance: Scalars['BigDecimal'];
    snapshots: Array<Maybe<LiquidityPositionSnapshot>>;
    block: Scalars['Int'];
    timestamp: Scalars['Int'];
};
export declare type LiquidityPositionsnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPositionSnapshot_filter>;
};
export declare type LiquidityPositionSnapshot = {
    id: Scalars['ID'];
    liquidityPosition: LiquidityPosition;
    timestamp: Scalars['Int'];
    block: Scalars['Int'];
    user: User;
    pair: Pair;
    token0PriceUSD: Scalars['BigDecimal'];
    token1PriceUSD: Scalars['BigDecimal'];
    reserve0: Scalars['BigDecimal'];
    reserve1: Scalars['BigDecimal'];
    reserveUSD: Scalars['BigDecimal'];
    liquidityTokenTotalSupply: Scalars['BigDecimal'];
    liquidityTokenBalance: Scalars['BigDecimal'];
};
export declare type LiquidityPositionSnapshot_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    liquidityPosition?: InputMaybe<Scalars['String']>;
    liquidityPosition_not?: InputMaybe<Scalars['String']>;
    liquidityPosition_gt?: InputMaybe<Scalars['String']>;
    liquidityPosition_lt?: InputMaybe<Scalars['String']>;
    liquidityPosition_gte?: InputMaybe<Scalars['String']>;
    liquidityPosition_lte?: InputMaybe<Scalars['String']>;
    liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
    liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
    liquidityPosition_contains?: InputMaybe<Scalars['String']>;
    liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_?: InputMaybe<LiquidityPosition_filter>;
    timestamp?: InputMaybe<Scalars['Int']>;
    timestamp_not?: InputMaybe<Scalars['Int']>;
    timestamp_gt?: InputMaybe<Scalars['Int']>;
    timestamp_lt?: InputMaybe<Scalars['Int']>;
    timestamp_gte?: InputMaybe<Scalars['Int']>;
    timestamp_lte?: InputMaybe<Scalars['Int']>;
    timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
    block?: InputMaybe<Scalars['Int']>;
    block_not?: InputMaybe<Scalars['Int']>;
    block_gt?: InputMaybe<Scalars['Int']>;
    block_lt?: InputMaybe<Scalars['Int']>;
    block_gte?: InputMaybe<Scalars['Int']>;
    block_lte?: InputMaybe<Scalars['Int']>;
    block_in?: InputMaybe<Array<Scalars['Int']>>;
    block_not_in?: InputMaybe<Array<Scalars['Int']>>;
    user?: InputMaybe<Scalars['String']>;
    user_not?: InputMaybe<Scalars['String']>;
    user_gt?: InputMaybe<Scalars['String']>;
    user_lt?: InputMaybe<Scalars['String']>;
    user_gte?: InputMaybe<Scalars['String']>;
    user_lte?: InputMaybe<Scalars['String']>;
    user_in?: InputMaybe<Array<Scalars['String']>>;
    user_not_in?: InputMaybe<Array<Scalars['String']>>;
    user_contains?: InputMaybe<Scalars['String']>;
    user_contains_nocase?: InputMaybe<Scalars['String']>;
    user_not_contains?: InputMaybe<Scalars['String']>;
    user_not_contains_nocase?: InputMaybe<Scalars['String']>;
    user_starts_with?: InputMaybe<Scalars['String']>;
    user_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_starts_with?: InputMaybe<Scalars['String']>;
    user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_ends_with?: InputMaybe<Scalars['String']>;
    user_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_ends_with?: InputMaybe<Scalars['String']>;
    user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_?: InputMaybe<User_filter>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Pair_filter>;
    token0PriceUSD?: InputMaybe<Scalars['BigDecimal']>;
    token0PriceUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    token0PriceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    token0PriceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    token0PriceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    token0PriceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    token0PriceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    token0PriceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    token1PriceUSD?: InputMaybe<Scalars['BigDecimal']>;
    token1PriceUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    token1PriceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    token1PriceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    token1PriceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    token1PriceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    token1PriceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    token1PriceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve0?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityTokenTotalSupply?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenTotalSupply_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityTokenBalance?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type LiquidityPositionSnapshot_orderBy = 'id' | 'liquidityPosition' | 'timestamp' | 'block' | 'user' | 'pair' | 'token0PriceUSD' | 'token1PriceUSD' | 'reserve0' | 'reserve1' | 'reserveUSD' | 'liquidityTokenTotalSupply' | 'liquidityTokenBalance';
export declare type LiquidityPosition_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    user?: InputMaybe<Scalars['String']>;
    user_not?: InputMaybe<Scalars['String']>;
    user_gt?: InputMaybe<Scalars['String']>;
    user_lt?: InputMaybe<Scalars['String']>;
    user_gte?: InputMaybe<Scalars['String']>;
    user_lte?: InputMaybe<Scalars['String']>;
    user_in?: InputMaybe<Array<Scalars['String']>>;
    user_not_in?: InputMaybe<Array<Scalars['String']>>;
    user_contains?: InputMaybe<Scalars['String']>;
    user_contains_nocase?: InputMaybe<Scalars['String']>;
    user_not_contains?: InputMaybe<Scalars['String']>;
    user_not_contains_nocase?: InputMaybe<Scalars['String']>;
    user_starts_with?: InputMaybe<Scalars['String']>;
    user_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_starts_with?: InputMaybe<Scalars['String']>;
    user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_ends_with?: InputMaybe<Scalars['String']>;
    user_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_ends_with?: InputMaybe<Scalars['String']>;
    user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_?: InputMaybe<User_filter>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Pair_filter>;
    liquidityTokenBalance?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityTokenBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    snapshots_?: InputMaybe<LiquidityPositionSnapshot_filter>;
    block?: InputMaybe<Scalars['Int']>;
    block_not?: InputMaybe<Scalars['Int']>;
    block_gt?: InputMaybe<Scalars['Int']>;
    block_lt?: InputMaybe<Scalars['Int']>;
    block_gte?: InputMaybe<Scalars['Int']>;
    block_lte?: InputMaybe<Scalars['Int']>;
    block_in?: InputMaybe<Array<Scalars['Int']>>;
    block_not_in?: InputMaybe<Array<Scalars['Int']>>;
    timestamp?: InputMaybe<Scalars['Int']>;
    timestamp_not?: InputMaybe<Scalars['Int']>;
    timestamp_gt?: InputMaybe<Scalars['Int']>;
    timestamp_lt?: InputMaybe<Scalars['Int']>;
    timestamp_gte?: InputMaybe<Scalars['Int']>;
    timestamp_lte?: InputMaybe<Scalars['Int']>;
    timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type LiquidityPosition_orderBy = 'id' | 'user' | 'pair' | 'liquidityTokenBalance' | 'snapshots' | 'block' | 'timestamp';
export declare type Mint = {
    id: Scalars['ID'];
    transaction: Transaction;
    timestamp: Scalars['BigInt'];
    pair: Pair;
    to: Scalars['Bytes'];
    liquidity: Scalars['BigDecimal'];
    sender?: Maybe<Scalars['Bytes']>;
    amount0?: Maybe<Scalars['BigDecimal']>;
    amount1?: Maybe<Scalars['BigDecimal']>;
    logIndex?: Maybe<Scalars['BigInt']>;
    amountUSD?: Maybe<Scalars['BigDecimal']>;
    feeTo?: Maybe<Scalars['Bytes']>;
    feeLiquidity?: Maybe<Scalars['BigDecimal']>;
};
export declare type Mint_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    transaction?: InputMaybe<Scalars['String']>;
    transaction_not?: InputMaybe<Scalars['String']>;
    transaction_gt?: InputMaybe<Scalars['String']>;
    transaction_lt?: InputMaybe<Scalars['String']>;
    transaction_gte?: InputMaybe<Scalars['String']>;
    transaction_lte?: InputMaybe<Scalars['String']>;
    transaction_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_contains?: InputMaybe<Scalars['String']>;
    transaction_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_contains?: InputMaybe<Scalars['String']>;
    transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_starts_with?: InputMaybe<Scalars['String']>;
    transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_ends_with?: InputMaybe<Scalars['String']>;
    transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_?: InputMaybe<Transaction_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Pair_filter>;
    to?: InputMaybe<Scalars['Bytes']>;
    to_not?: InputMaybe<Scalars['Bytes']>;
    to_in?: InputMaybe<Array<Scalars['Bytes']>>;
    to_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    to_contains?: InputMaybe<Scalars['Bytes']>;
    to_not_contains?: InputMaybe<Scalars['Bytes']>;
    liquidity?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    sender?: InputMaybe<Scalars['Bytes']>;
    sender_not?: InputMaybe<Scalars['Bytes']>;
    sender_in?: InputMaybe<Array<Scalars['Bytes']>>;
    sender_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    sender_contains?: InputMaybe<Scalars['Bytes']>;
    sender_not_contains?: InputMaybe<Scalars['Bytes']>;
    amount0?: InputMaybe<Scalars['BigDecimal']>;
    amount0_not?: InputMaybe<Scalars['BigDecimal']>;
    amount0_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount0_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount0_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount0_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1?: InputMaybe<Scalars['BigDecimal']>;
    amount1_not?: InputMaybe<Scalars['BigDecimal']>;
    amount1_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount1_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount1_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount1_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    logIndex?: InputMaybe<Scalars['BigInt']>;
    logIndex_not?: InputMaybe<Scalars['BigInt']>;
    logIndex_gt?: InputMaybe<Scalars['BigInt']>;
    logIndex_lt?: InputMaybe<Scalars['BigInt']>;
    logIndex_gte?: InputMaybe<Scalars['BigInt']>;
    logIndex_lte?: InputMaybe<Scalars['BigInt']>;
    logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    feeTo?: InputMaybe<Scalars['Bytes']>;
    feeTo_not?: InputMaybe<Scalars['Bytes']>;
    feeTo_in?: InputMaybe<Array<Scalars['Bytes']>>;
    feeTo_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    feeTo_contains?: InputMaybe<Scalars['Bytes']>;
    feeTo_not_contains?: InputMaybe<Scalars['Bytes']>;
    feeLiquidity?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;
    feeLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    feeLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Mint_orderBy = 'id' | 'transaction' | 'timestamp' | 'pair' | 'to' | 'liquidity' | 'sender' | 'amount0' | 'amount1' | 'logIndex' | 'amountUSD' | 'feeTo' | 'feeLiquidity';
/** Defines the order direction, either ascending or descending */
export declare type OrderDirection = 'asc' | 'desc';
export declare type Pair = {
    id: Scalars['ID'];
    factory: Factory;
    name: Scalars['String'];
    token0: Token;
    token1: Token;
    reserve0: Scalars['BigDecimal'];
    reserve1: Scalars['BigDecimal'];
    totalSupply: Scalars['BigDecimal'];
    reserveETH: Scalars['BigDecimal'];
    reserveUSD: Scalars['BigDecimal'];
    trackedReserveETH: Scalars['BigDecimal'];
    token0Price: Scalars['BigDecimal'];
    token1Price: Scalars['BigDecimal'];
    volumeToken0: Scalars['BigDecimal'];
    volumeToken1: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    untrackedVolumeUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidityProviderCount: Scalars['BigInt'];
    liquidityPositions: Array<LiquidityPosition>;
    liquidityPositionSnapshots: Array<LiquidityPositionSnapshot>;
    dayData: Array<PairDayData>;
    hourData: Array<PairHourData>;
    mints: Array<Mint>;
    burns: Array<Burn>;
    swaps: Array<Swap>;
    timestamp: Scalars['BigInt'];
    block: Scalars['BigInt'];
};
export declare type PairliquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPosition_filter>;
};
export declare type PairliquidityPositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPositionSnapshot_filter>;
};
export declare type PairdayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairDayData_filter>;
};
export declare type PairhourDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairHourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairHourData_filter>;
};
export declare type PairmintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Mint_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Mint_filter>;
};
export declare type PairburnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Burn_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Burn_filter>;
};
export declare type PairswapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Swap_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Swap_filter>;
};
export declare type PairDayData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    pair: Pair;
    token0: Token;
    token1: Token;
    reserve0: Scalars['BigDecimal'];
    reserve1: Scalars['BigDecimal'];
    totalSupply: Scalars['BigDecimal'];
    reserveUSD: Scalars['BigDecimal'];
    volumeToken0: Scalars['BigDecimal'];
    volumeToken1: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type PairDayData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Pair_filter>;
    token0?: InputMaybe<Scalars['String']>;
    token0_not?: InputMaybe<Scalars['String']>;
    token0_gt?: InputMaybe<Scalars['String']>;
    token0_lt?: InputMaybe<Scalars['String']>;
    token0_gte?: InputMaybe<Scalars['String']>;
    token0_lte?: InputMaybe<Scalars['String']>;
    token0_in?: InputMaybe<Array<Scalars['String']>>;
    token0_not_in?: InputMaybe<Array<Scalars['String']>>;
    token0_contains?: InputMaybe<Scalars['String']>;
    token0_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_not_contains?: InputMaybe<Scalars['String']>;
    token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_starts_with?: InputMaybe<Scalars['String']>;
    token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_starts_with?: InputMaybe<Scalars['String']>;
    token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_ends_with?: InputMaybe<Scalars['String']>;
    token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_ends_with?: InputMaybe<Scalars['String']>;
    token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_?: InputMaybe<Token_filter>;
    token1?: InputMaybe<Scalars['String']>;
    token1_not?: InputMaybe<Scalars['String']>;
    token1_gt?: InputMaybe<Scalars['String']>;
    token1_lt?: InputMaybe<Scalars['String']>;
    token1_gte?: InputMaybe<Scalars['String']>;
    token1_lte?: InputMaybe<Scalars['String']>;
    token1_in?: InputMaybe<Array<Scalars['String']>>;
    token1_not_in?: InputMaybe<Array<Scalars['String']>>;
    token1_contains?: InputMaybe<Scalars['String']>;
    token1_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_not_contains?: InputMaybe<Scalars['String']>;
    token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_starts_with?: InputMaybe<Scalars['String']>;
    token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_starts_with?: InputMaybe<Scalars['String']>;
    token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_ends_with?: InputMaybe<Scalars['String']>;
    token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_ends_with?: InputMaybe<Scalars['String']>;
    token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_?: InputMaybe<Token_filter>;
    reserve0?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    totalSupply?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_not?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_gt?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_lt?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_gte?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_lte?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    totalSupply_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken0?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken1?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type PairDayData_orderBy = 'id' | 'date' | 'pair' | 'token0' | 'token1' | 'reserve0' | 'reserve1' | 'totalSupply' | 'reserveUSD' | 'volumeToken0' | 'volumeToken1' | 'volumeUSD' | 'txCount';
export declare type PairHourData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    pair: Pair;
    reserve0: Scalars['BigDecimal'];
    reserve1: Scalars['BigDecimal'];
    reserveUSD: Scalars['BigDecimal'];
    volumeToken0: Scalars['BigDecimal'];
    volumeToken1: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type PairHourData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Pair_filter>;
    reserve0?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken0?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken1?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type PairHourData_orderBy = 'id' | 'date' | 'pair' | 'reserve0' | 'reserve1' | 'reserveUSD' | 'volumeToken0' | 'volumeToken1' | 'volumeUSD' | 'txCount';
export declare type Pair_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Factory_filter>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0?: InputMaybe<Scalars['String']>;
    token0_not?: InputMaybe<Scalars['String']>;
    token0_gt?: InputMaybe<Scalars['String']>;
    token0_lt?: InputMaybe<Scalars['String']>;
    token0_gte?: InputMaybe<Scalars['String']>;
    token0_lte?: InputMaybe<Scalars['String']>;
    token0_in?: InputMaybe<Array<Scalars['String']>>;
    token0_not_in?: InputMaybe<Array<Scalars['String']>>;
    token0_contains?: InputMaybe<Scalars['String']>;
    token0_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_not_contains?: InputMaybe<Scalars['String']>;
    token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_starts_with?: InputMaybe<Scalars['String']>;
    token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_starts_with?: InputMaybe<Scalars['String']>;
    token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_ends_with?: InputMaybe<Scalars['String']>;
    token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_ends_with?: InputMaybe<Scalars['String']>;
    token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_?: InputMaybe<Token_filter>;
    token1?: InputMaybe<Scalars['String']>;
    token1_not?: InputMaybe<Scalars['String']>;
    token1_gt?: InputMaybe<Scalars['String']>;
    token1_lt?: InputMaybe<Scalars['String']>;
    token1_gte?: InputMaybe<Scalars['String']>;
    token1_lte?: InputMaybe<Scalars['String']>;
    token1_in?: InputMaybe<Array<Scalars['String']>>;
    token1_not_in?: InputMaybe<Array<Scalars['String']>>;
    token1_contains?: InputMaybe<Scalars['String']>;
    token1_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_not_contains?: InputMaybe<Scalars['String']>;
    token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_starts_with?: InputMaybe<Scalars['String']>;
    token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_starts_with?: InputMaybe<Scalars['String']>;
    token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_ends_with?: InputMaybe<Scalars['String']>;
    token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_ends_with?: InputMaybe<Scalars['String']>;
    token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_?: InputMaybe<Token_filter>;
    reserve0?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    totalSupply?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_not?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_gt?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_lt?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_gte?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_lte?: InputMaybe<Scalars['BigDecimal']>;
    totalSupply_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    totalSupply_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveETH?: InputMaybe<Scalars['BigDecimal']>;
    reserveETH_not?: InputMaybe<Scalars['BigDecimal']>;
    reserveETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserveETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserveETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserveETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserveETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    trackedReserveETH?: InputMaybe<Scalars['BigDecimal']>;
    trackedReserveETH_not?: InputMaybe<Scalars['BigDecimal']>;
    trackedReserveETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    trackedReserveETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    trackedReserveETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    trackedReserveETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    trackedReserveETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    trackedReserveETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    token0Price?: InputMaybe<Scalars['BigDecimal']>;
    token0Price_not?: InputMaybe<Scalars['BigDecimal']>;
    token0Price_gt?: InputMaybe<Scalars['BigDecimal']>;
    token0Price_lt?: InputMaybe<Scalars['BigDecimal']>;
    token0Price_gte?: InputMaybe<Scalars['BigDecimal']>;
    token0Price_lte?: InputMaybe<Scalars['BigDecimal']>;
    token0Price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    token0Price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    token1Price?: InputMaybe<Scalars['BigDecimal']>;
    token1Price_not?: InputMaybe<Scalars['BigDecimal']>;
    token1Price_gt?: InputMaybe<Scalars['BigDecimal']>;
    token1Price_lt?: InputMaybe<Scalars['BigDecimal']>;
    token1Price_gte?: InputMaybe<Scalars['BigDecimal']>;
    token1Price_lte?: InputMaybe<Scalars['BigDecimal']>;
    token1Price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    token1Price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken0?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken0_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken0_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken1?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeToken1_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeToken1_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidityPositions_?: InputMaybe<LiquidityPosition_filter>;
    liquidityPositionSnapshots_?: InputMaybe<LiquidityPositionSnapshot_filter>;
    dayData_?: InputMaybe<PairDayData_filter>;
    hourData_?: InputMaybe<PairHourData_filter>;
    mints_?: InputMaybe<Mint_filter>;
    burns_?: InputMaybe<Burn_filter>;
    swaps_?: InputMaybe<Swap_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    block?: InputMaybe<Scalars['BigInt']>;
    block_not?: InputMaybe<Scalars['BigInt']>;
    block_gt?: InputMaybe<Scalars['BigInt']>;
    block_lt?: InputMaybe<Scalars['BigInt']>;
    block_gte?: InputMaybe<Scalars['BigInt']>;
    block_lte?: InputMaybe<Scalars['BigInt']>;
    block_in?: InputMaybe<Array<Scalars['BigInt']>>;
    block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Pair_orderBy = 'id' | 'factory' | 'name' | 'token0' | 'token1' | 'reserve0' | 'reserve1' | 'totalSupply' | 'reserveETH' | 'reserveUSD' | 'trackedReserveETH' | 'token0Price' | 'token1Price' | 'volumeToken0' | 'volumeToken1' | 'volumeUSD' | 'untrackedVolumeUSD' | 'txCount' | 'liquidityProviderCount' | 'liquidityPositions' | 'liquidityPositionSnapshots' | 'dayData' | 'hourData' | 'mints' | 'burns' | 'swaps' | 'timestamp' | 'block';
export declare type Query = {
    user?: Maybe<User>;
    users: Array<User>;
    bundle?: Maybe<Bundle>;
    bundles: Array<Bundle>;
    factory?: Maybe<Factory>;
    factories: Array<Factory>;
    hourData?: Maybe<HourData>;
    hourDatas: Array<HourData>;
    dayData?: Maybe<DayData>;
    dayDatas: Array<DayData>;
    token?: Maybe<Token>;
    tokens: Array<Token>;
    tokenHourData?: Maybe<TokenHourData>;
    tokenHourDatas: Array<TokenHourData>;
    tokenDayData?: Maybe<TokenDayData>;
    tokenDayDatas: Array<TokenDayData>;
    pair?: Maybe<Pair>;
    pairs: Array<Pair>;
    pairHourData?: Maybe<PairHourData>;
    pairHourDatas: Array<PairHourData>;
    pairDayData?: Maybe<PairDayData>;
    pairDayDatas: Array<PairDayData>;
    liquidityPosition?: Maybe<LiquidityPosition>;
    liquidityPositions: Array<LiquidityPosition>;
    liquidityPositionSnapshot?: Maybe<LiquidityPositionSnapshot>;
    liquidityPositionSnapshots: Array<LiquidityPositionSnapshot>;
    transaction?: Maybe<Transaction>;
    transactions: Array<Transaction>;
    mint?: Maybe<Mint>;
    mints: Array<Mint>;
    burn?: Maybe<Burn>;
    burns: Array<Burn>;
    swap?: Maybe<Swap>;
    swaps: Array<Swap>;
    tokenSearch: Array<Token>;
    pairSearch: Array<Pair>;
    userSearch: Array<User>;
    /** Access to subgraph metadata */
    _meta?: Maybe<_Meta_>;
};
export declare type QueryuserArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryusersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<User_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<User_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerybundleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerybundlesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Bundle_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Bundle_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryfactoryArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryfactoriesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Factory_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Factory_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryhourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryhourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<HourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<HourData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerydayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerydayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<DayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<DayData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Token_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Token_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytokenHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytokenHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<TokenHourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<TokenHourData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytokenDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytokenDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<TokenDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<TokenDayData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerypairArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerypairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Pair_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Pair_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerypairHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerypairHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairHourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairHourData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerypairDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerypairDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairDayData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryliquidityPositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryliquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPosition_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryliquidityPositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryliquidityPositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPositionSnapshot_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytransactionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytransactionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Transaction_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Transaction_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerymintArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerymintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Mint_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Mint_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryburnArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryburnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Burn_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Burn_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryswapArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryswapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Swap_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Swap_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerytokenSearchArgs = {
    text: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QuerypairSearchArgs = {
    text: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type QueryuserSearchArgs = {
    text: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type Query_metaArgs = {
    block?: InputMaybe<Block_height>;
};
export declare type Subscription = {
    user?: Maybe<User>;
    users: Array<User>;
    bundle?: Maybe<Bundle>;
    bundles: Array<Bundle>;
    factory?: Maybe<Factory>;
    factories: Array<Factory>;
    hourData?: Maybe<HourData>;
    hourDatas: Array<HourData>;
    dayData?: Maybe<DayData>;
    dayDatas: Array<DayData>;
    token?: Maybe<Token>;
    tokens: Array<Token>;
    tokenHourData?: Maybe<TokenHourData>;
    tokenHourDatas: Array<TokenHourData>;
    tokenDayData?: Maybe<TokenDayData>;
    tokenDayDatas: Array<TokenDayData>;
    pair?: Maybe<Pair>;
    pairs: Array<Pair>;
    pairHourData?: Maybe<PairHourData>;
    pairHourDatas: Array<PairHourData>;
    pairDayData?: Maybe<PairDayData>;
    pairDayDatas: Array<PairDayData>;
    liquidityPosition?: Maybe<LiquidityPosition>;
    liquidityPositions: Array<LiquidityPosition>;
    liquidityPositionSnapshot?: Maybe<LiquidityPositionSnapshot>;
    liquidityPositionSnapshots: Array<LiquidityPositionSnapshot>;
    transaction?: Maybe<Transaction>;
    transactions: Array<Transaction>;
    mint?: Maybe<Mint>;
    mints: Array<Mint>;
    burn?: Maybe<Burn>;
    burns: Array<Burn>;
    swap?: Maybe<Swap>;
    swaps: Array<Swap>;
    /** Access to subgraph metadata */
    _meta?: Maybe<_Meta_>;
};
export declare type SubscriptionuserArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionusersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<User_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<User_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionbundleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionbundlesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Bundle_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Bundle_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionfactoryArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionfactoriesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Factory_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Factory_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionhourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionhourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<HourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<HourData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiondayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiondayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<DayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<DayData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Token_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Token_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontokenHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontokenHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<TokenHourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<TokenHourData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontokenDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontokenDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<TokenDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<TokenDayData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionpairArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionpairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Pair_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Pair_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionpairHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionpairHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairHourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairHourData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionpairDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionpairDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairDayData_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionliquidityPositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionliquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPosition_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionliquidityPositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionliquidityPositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPositionSnapshot_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontransactionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptiontransactionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Transaction_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Transaction_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionmintArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionmintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Mint_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Mint_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionburnArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionburnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Burn_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Burn_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionswapArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type SubscriptionswapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Swap_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Swap_filter>;
    block?: InputMaybe<Block_height>;
    subgraphError?: _SubgraphErrorPolicy_;
};
export declare type Subscription_metaArgs = {
    block?: InputMaybe<Block_height>;
};
export declare type Swap = {
    id: Scalars['ID'];
    transaction: Transaction;
    timestamp: Scalars['BigInt'];
    pair: Pair;
    sender: Scalars['Bytes'];
    amount0In: Scalars['BigDecimal'];
    amount1In: Scalars['BigDecimal'];
    amount0Out: Scalars['BigDecimal'];
    amount1Out: Scalars['BigDecimal'];
    to: Scalars['Bytes'];
    logIndex?: Maybe<Scalars['BigInt']>;
    amountUSD: Scalars['BigDecimal'];
};
export declare type Swap_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    transaction?: InputMaybe<Scalars['String']>;
    transaction_not?: InputMaybe<Scalars['String']>;
    transaction_gt?: InputMaybe<Scalars['String']>;
    transaction_lt?: InputMaybe<Scalars['String']>;
    transaction_gte?: InputMaybe<Scalars['String']>;
    transaction_lte?: InputMaybe<Scalars['String']>;
    transaction_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_contains?: InputMaybe<Scalars['String']>;
    transaction_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_contains?: InputMaybe<Scalars['String']>;
    transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_starts_with?: InputMaybe<Scalars['String']>;
    transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_ends_with?: InputMaybe<Scalars['String']>;
    transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_?: InputMaybe<Transaction_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Pair_filter>;
    sender?: InputMaybe<Scalars['Bytes']>;
    sender_not?: InputMaybe<Scalars['Bytes']>;
    sender_in?: InputMaybe<Array<Scalars['Bytes']>>;
    sender_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    sender_contains?: InputMaybe<Scalars['Bytes']>;
    sender_not_contains?: InputMaybe<Scalars['Bytes']>;
    amount0In?: InputMaybe<Scalars['BigDecimal']>;
    amount0In_not?: InputMaybe<Scalars['BigDecimal']>;
    amount0In_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount0In_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount0In_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount0In_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount0In_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount0In_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1In?: InputMaybe<Scalars['BigDecimal']>;
    amount1In_not?: InputMaybe<Scalars['BigDecimal']>;
    amount1In_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount1In_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount1In_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount1In_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount1In_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1In_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount0Out?: InputMaybe<Scalars['BigDecimal']>;
    amount0Out_not?: InputMaybe<Scalars['BigDecimal']>;
    amount0Out_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount0Out_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount0Out_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount0Out_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount0Out_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount0Out_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1Out?: InputMaybe<Scalars['BigDecimal']>;
    amount1Out_not?: InputMaybe<Scalars['BigDecimal']>;
    amount1Out_gt?: InputMaybe<Scalars['BigDecimal']>;
    amount1Out_lt?: InputMaybe<Scalars['BigDecimal']>;
    amount1Out_gte?: InputMaybe<Scalars['BigDecimal']>;
    amount1Out_lte?: InputMaybe<Scalars['BigDecimal']>;
    amount1Out_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amount1Out_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    to?: InputMaybe<Scalars['Bytes']>;
    to_not?: InputMaybe<Scalars['Bytes']>;
    to_in?: InputMaybe<Array<Scalars['Bytes']>>;
    to_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
    to_contains?: InputMaybe<Scalars['Bytes']>;
    to_not_contains?: InputMaybe<Scalars['Bytes']>;
    logIndex?: InputMaybe<Scalars['BigInt']>;
    logIndex_not?: InputMaybe<Scalars['BigInt']>;
    logIndex_gt?: InputMaybe<Scalars['BigInt']>;
    logIndex_lt?: InputMaybe<Scalars['BigInt']>;
    logIndex_gte?: InputMaybe<Scalars['BigInt']>;
    logIndex_lte?: InputMaybe<Scalars['BigInt']>;
    logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Swap_orderBy = 'id' | 'transaction' | 'timestamp' | 'pair' | 'sender' | 'amount0In' | 'amount1In' | 'amount0Out' | 'amount1Out' | 'to' | 'logIndex' | 'amountUSD';
export declare type Token = {
    id: Scalars['ID'];
    factory: Factory;
    symbol: Scalars['String'];
    name: Scalars['String'];
    decimals: Scalars['BigInt'];
    totalSupply: Scalars['BigInt'];
    volume: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    untrackedVolumeUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidity: Scalars['BigDecimal'];
    derivedETH: Scalars['BigDecimal'];
    hourData: Array<TokenHourData>;
    dayData: Array<TokenDayData>;
    basePairs: Array<Pair>;
    quotePairs: Array<Pair>;
    basePairsDayData: Array<PairDayData>;
    quotePairsDayData: Array<PairDayData>;
};
export declare type TokenhourDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<TokenHourData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<TokenHourData_filter>;
};
export declare type TokendayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<TokenDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<TokenDayData_filter>;
};
export declare type TokenbasePairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Pair_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Pair_filter>;
};
export declare type TokenquotePairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Pair_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Pair_filter>;
};
export declare type TokenbasePairsDayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairDayData_filter>;
};
export declare type TokenquotePairsDayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<PairDayData_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<PairDayData_filter>;
};
export declare type TokenDayData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    token: Token;
    volume: Scalars['BigDecimal'];
    volumeETH: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidity: Scalars['BigDecimal'];
    liquidityETH: Scalars['BigDecimal'];
    liquidityUSD: Scalars['BigDecimal'];
    priceUSD: Scalars['BigDecimal'];
};
export declare type TokenDayData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    token?: InputMaybe<Scalars['String']>;
    token_not?: InputMaybe<Scalars['String']>;
    token_gt?: InputMaybe<Scalars['String']>;
    token_lt?: InputMaybe<Scalars['String']>;
    token_gte?: InputMaybe<Scalars['String']>;
    token_lte?: InputMaybe<Scalars['String']>;
    token_in?: InputMaybe<Array<Scalars['String']>>;
    token_not_in?: InputMaybe<Array<Scalars['String']>>;
    token_contains?: InputMaybe<Scalars['String']>;
    token_contains_nocase?: InputMaybe<Scalars['String']>;
    token_not_contains?: InputMaybe<Scalars['String']>;
    token_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token_starts_with?: InputMaybe<Scalars['String']>;
    token_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_starts_with?: InputMaybe<Scalars['String']>;
    token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_ends_with?: InputMaybe<Scalars['String']>;
    token_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_ends_with?: InputMaybe<Scalars['String']>;
    token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_?: InputMaybe<Token_filter>;
    volume?: InputMaybe<Scalars['BigDecimal']>;
    volume_not?: InputMaybe<Scalars['BigDecimal']>;
    volume_gt?: InputMaybe<Scalars['BigDecimal']>;
    volume_lt?: InputMaybe<Scalars['BigDecimal']>;
    volume_gte?: InputMaybe<Scalars['BigDecimal']>;
    volume_lte?: InputMaybe<Scalars['BigDecimal']>;
    volume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidity?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    priceUSD?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    priceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type TokenDayData_orderBy = 'id' | 'date' | 'token' | 'volume' | 'volumeETH' | 'volumeUSD' | 'txCount' | 'liquidity' | 'liquidityETH' | 'liquidityUSD' | 'priceUSD';
export declare type TokenHourData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    token: Token;
    volume: Scalars['BigDecimal'];
    volumeETH: Scalars['BigDecimal'];
    volumeUSD: Scalars['BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidity: Scalars['BigDecimal'];
    liquidityETH: Scalars['BigDecimal'];
    liquidityUSD: Scalars['BigDecimal'];
    priceUSD: Scalars['BigDecimal'];
};
export declare type TokenHourData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    token?: InputMaybe<Scalars['String']>;
    token_not?: InputMaybe<Scalars['String']>;
    token_gt?: InputMaybe<Scalars['String']>;
    token_lt?: InputMaybe<Scalars['String']>;
    token_gte?: InputMaybe<Scalars['String']>;
    token_lte?: InputMaybe<Scalars['String']>;
    token_in?: InputMaybe<Array<Scalars['String']>>;
    token_not_in?: InputMaybe<Array<Scalars['String']>>;
    token_contains?: InputMaybe<Scalars['String']>;
    token_contains_nocase?: InputMaybe<Scalars['String']>;
    token_not_contains?: InputMaybe<Scalars['String']>;
    token_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token_starts_with?: InputMaybe<Scalars['String']>;
    token_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_starts_with?: InputMaybe<Scalars['String']>;
    token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_ends_with?: InputMaybe<Scalars['String']>;
    token_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_ends_with?: InputMaybe<Scalars['String']>;
    token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_?: InputMaybe<Token_filter>;
    volume?: InputMaybe<Scalars['BigDecimal']>;
    volume_not?: InputMaybe<Scalars['BigDecimal']>;
    volume_gt?: InputMaybe<Scalars['BigDecimal']>;
    volume_lt?: InputMaybe<Scalars['BigDecimal']>;
    volume_gte?: InputMaybe<Scalars['BigDecimal']>;
    volume_lte?: InputMaybe<Scalars['BigDecimal']>;
    volume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidity?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    priceUSD?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    priceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    priceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type TokenHourData_orderBy = 'id' | 'date' | 'token' | 'volume' | 'volumeETH' | 'volumeUSD' | 'txCount' | 'liquidity' | 'liquidityETH' | 'liquidityUSD' | 'priceUSD';
export declare type Token_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Factory_filter>;
    symbol?: InputMaybe<Scalars['String']>;
    symbol_not?: InputMaybe<Scalars['String']>;
    symbol_gt?: InputMaybe<Scalars['String']>;
    symbol_lt?: InputMaybe<Scalars['String']>;
    symbol_gte?: InputMaybe<Scalars['String']>;
    symbol_lte?: InputMaybe<Scalars['String']>;
    symbol_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_contains?: InputMaybe<Scalars['String']>;
    symbol_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_contains?: InputMaybe<Scalars['String']>;
    symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_starts_with?: InputMaybe<Scalars['String']>;
    symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_ends_with?: InputMaybe<Scalars['String']>;
    symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    decimals?: InputMaybe<Scalars['BigInt']>;
    decimals_not?: InputMaybe<Scalars['BigInt']>;
    decimals_gt?: InputMaybe<Scalars['BigInt']>;
    decimals_lt?: InputMaybe<Scalars['BigInt']>;
    decimals_gte?: InputMaybe<Scalars['BigInt']>;
    decimals_lte?: InputMaybe<Scalars['BigInt']>;
    decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
    decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalSupply?: InputMaybe<Scalars['BigInt']>;
    totalSupply_not?: InputMaybe<Scalars['BigInt']>;
    totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
    totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
    totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
    totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
    totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    volume?: InputMaybe<Scalars['BigDecimal']>;
    volume_not?: InputMaybe<Scalars['BigDecimal']>;
    volume_gt?: InputMaybe<Scalars['BigDecimal']>;
    volume_lt?: InputMaybe<Scalars['BigDecimal']>;
    volume_gte?: InputMaybe<Scalars['BigDecimal']>;
    volume_lte?: InputMaybe<Scalars['BigDecimal']>;
    volume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;
    untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidity?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    derivedETH?: InputMaybe<Scalars['BigDecimal']>;
    derivedETH_not?: InputMaybe<Scalars['BigDecimal']>;
    derivedETH_gt?: InputMaybe<Scalars['BigDecimal']>;
    derivedETH_lt?: InputMaybe<Scalars['BigDecimal']>;
    derivedETH_gte?: InputMaybe<Scalars['BigDecimal']>;
    derivedETH_lte?: InputMaybe<Scalars['BigDecimal']>;
    derivedETH_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    derivedETH_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
    hourData_?: InputMaybe<TokenHourData_filter>;
    dayData_?: InputMaybe<TokenDayData_filter>;
    basePairs_?: InputMaybe<Pair_filter>;
    quotePairs_?: InputMaybe<Pair_filter>;
    basePairsDayData_?: InputMaybe<PairDayData_filter>;
    quotePairsDayData_?: InputMaybe<PairDayData_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Token_orderBy = 'id' | 'factory' | 'symbol' | 'name' | 'decimals' | 'totalSupply' | 'volume' | 'volumeUSD' | 'untrackedVolumeUSD' | 'txCount' | 'liquidity' | 'derivedETH' | 'hourData' | 'dayData' | 'basePairs' | 'quotePairs' | 'basePairsDayData' | 'quotePairsDayData';
export declare type Transaction = {
    id: Scalars['ID'];
    blockNumber: Scalars['BigInt'];
    timestamp: Scalars['BigInt'];
    mints: Array<Maybe<Mint>>;
    burns: Array<Maybe<Burn>>;
    swaps: Array<Maybe<Swap>>;
};
export declare type TransactionmintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Mint_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Mint_filter>;
};
export declare type TransactionburnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Burn_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Burn_filter>;
};
export declare type TransactionswapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Swap_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<Swap_filter>;
};
export declare type Transaction_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    mints?: InputMaybe<Array<Scalars['String']>>;
    mints_not?: InputMaybe<Array<Scalars['String']>>;
    mints_contains?: InputMaybe<Array<Scalars['String']>>;
    mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
    mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mints_?: InputMaybe<Mint_filter>;
    burns?: InputMaybe<Array<Scalars['String']>>;
    burns_not?: InputMaybe<Array<Scalars['String']>>;
    burns_contains?: InputMaybe<Array<Scalars['String']>>;
    burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
    burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    burns_?: InputMaybe<Burn_filter>;
    swaps?: InputMaybe<Array<Scalars['String']>>;
    swaps_not?: InputMaybe<Array<Scalars['String']>>;
    swaps_contains?: InputMaybe<Array<Scalars['String']>>;
    swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
    swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    swaps_?: InputMaybe<Swap_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type Transaction_orderBy = 'id' | 'blockNumber' | 'timestamp' | 'mints' | 'burns' | 'swaps';
export declare type User = {
    id: Scalars['ID'];
    liquidityPositions: Array<LiquidityPosition>;
};
export declare type UserliquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<OrderDirection>;
    where?: InputMaybe<LiquidityPosition_filter>;
};
export declare type User_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    liquidityPositions_?: InputMaybe<LiquidityPosition_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<BlockChangedFilter>;
};
export declare type User_orderBy = 'id' | 'liquidityPositions';
export declare type _Block_ = {
    /** The hash of the block */
    hash?: Maybe<Scalars['Bytes']>;
    /** The block number */
    number: Scalars['Int'];
    /** Integer representation of the timestamp stored in blocks for the chain */
    timestamp?: Maybe<Scalars['Int']>;
};
/** The type for the top-level _meta field */
export declare type _Meta_ = {
    /**
     * Information about a specific subgraph block. The hash of the block
     * will be null if the _meta field has a block constraint that asks for
     * a block number. It will be filled if the _meta field has no block constraint
     * and therefore asks for the latest  block
     *
     */
    block: _Block_;
    /** The deployment ID */
    deployment: Scalars['String'];
    /** If `true`, the subgraph encountered indexing errors at some past block */
    hasIndexingErrors: Scalars['Boolean'];
};
export declare type _SubgraphErrorPolicy_ = 
/** Data will be returned even if the subgraph has indexing errors */
'allow'
/** If the subgraph has indexing errors, data will be omitted. The default. */
 | 'deny';
export declare type WithIndex<TObject> = TObject & Record<string, any>;
export declare type ResolversObject<TObject> = WithIndex<TObject>;
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = ResolversObject<{
    BigDecimal: ResolverTypeWrapper<Scalars['BigDecimal']>;
    BigInt: ResolverTypeWrapper<Scalars['BigInt']>;
    BlockChangedFilter: BlockChangedFilter;
    Block_height: Block_height;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
    Bundle: ResolverTypeWrapper<Bundle>;
    Bundle_filter: Bundle_filter;
    Bundle_orderBy: Bundle_orderBy;
    Burn: ResolverTypeWrapper<Burn>;
    Burn_filter: Burn_filter;
    Burn_orderBy: Burn_orderBy;
    Bytes: ResolverTypeWrapper<Scalars['Bytes']>;
    DayData: ResolverTypeWrapper<DayData>;
    DayData_filter: DayData_filter;
    DayData_orderBy: DayData_orderBy;
    Factory: ResolverTypeWrapper<Factory>;
    Factory_filter: Factory_filter;
    Factory_orderBy: Factory_orderBy;
    Float: ResolverTypeWrapper<Scalars['Float']>;
    HourData: ResolverTypeWrapper<HourData>;
    HourData_filter: HourData_filter;
    HourData_orderBy: HourData_orderBy;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    LiquidityPosition: ResolverTypeWrapper<LiquidityPosition>;
    LiquidityPositionSnapshot: ResolverTypeWrapper<LiquidityPositionSnapshot>;
    LiquidityPositionSnapshot_filter: LiquidityPositionSnapshot_filter;
    LiquidityPositionSnapshot_orderBy: LiquidityPositionSnapshot_orderBy;
    LiquidityPosition_filter: LiquidityPosition_filter;
    LiquidityPosition_orderBy: LiquidityPosition_orderBy;
    Mint: ResolverTypeWrapper<Mint>;
    Mint_filter: Mint_filter;
    Mint_orderBy: Mint_orderBy;
    OrderDirection: OrderDirection;
    Pair: ResolverTypeWrapper<Pair>;
    PairDayData: ResolverTypeWrapper<PairDayData>;
    PairDayData_filter: PairDayData_filter;
    PairDayData_orderBy: PairDayData_orderBy;
    PairHourData: ResolverTypeWrapper<PairHourData>;
    PairHourData_filter: PairHourData_filter;
    PairHourData_orderBy: PairHourData_orderBy;
    Pair_filter: Pair_filter;
    Pair_orderBy: Pair_orderBy;
    Query: ResolverTypeWrapper<{}>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Subscription: ResolverTypeWrapper<{}>;
    Swap: ResolverTypeWrapper<Swap>;
    Swap_filter: Swap_filter;
    Swap_orderBy: Swap_orderBy;
    Token: ResolverTypeWrapper<Token>;
    TokenDayData: ResolverTypeWrapper<TokenDayData>;
    TokenDayData_filter: TokenDayData_filter;
    TokenDayData_orderBy: TokenDayData_orderBy;
    TokenHourData: ResolverTypeWrapper<TokenHourData>;
    TokenHourData_filter: TokenHourData_filter;
    TokenHourData_orderBy: TokenHourData_orderBy;
    Token_filter: Token_filter;
    Token_orderBy: Token_orderBy;
    Transaction: ResolverTypeWrapper<Transaction>;
    Transaction_filter: Transaction_filter;
    Transaction_orderBy: Transaction_orderBy;
    User: ResolverTypeWrapper<User>;
    User_filter: User_filter;
    User_orderBy: User_orderBy;
    _Block_: ResolverTypeWrapper<_Block_>;
    _Meta_: ResolverTypeWrapper<_Meta_>;
    _SubgraphErrorPolicy_: _SubgraphErrorPolicy_;
}>;
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = ResolversObject<{
    BigDecimal: Scalars['BigDecimal'];
    BigInt: Scalars['BigInt'];
    BlockChangedFilter: BlockChangedFilter;
    Block_height: Block_height;
    Boolean: Scalars['Boolean'];
    Bundle: Bundle;
    Bundle_filter: Bundle_filter;
    Burn: Burn;
    Burn_filter: Burn_filter;
    Bytes: Scalars['Bytes'];
    DayData: DayData;
    DayData_filter: DayData_filter;
    Factory: Factory;
    Factory_filter: Factory_filter;
    Float: Scalars['Float'];
    HourData: HourData;
    HourData_filter: HourData_filter;
    ID: Scalars['ID'];
    Int: Scalars['Int'];
    LiquidityPosition: LiquidityPosition;
    LiquidityPositionSnapshot: LiquidityPositionSnapshot;
    LiquidityPositionSnapshot_filter: LiquidityPositionSnapshot_filter;
    LiquidityPosition_filter: LiquidityPosition_filter;
    Mint: Mint;
    Mint_filter: Mint_filter;
    Pair: Pair;
    PairDayData: PairDayData;
    PairDayData_filter: PairDayData_filter;
    PairHourData: PairHourData;
    PairHourData_filter: PairHourData_filter;
    Pair_filter: Pair_filter;
    Query: {};
    String: Scalars['String'];
    Subscription: {};
    Swap: Swap;
    Swap_filter: Swap_filter;
    Token: Token;
    TokenDayData: TokenDayData;
    TokenDayData_filter: TokenDayData_filter;
    TokenHourData: TokenHourData;
    TokenHourData_filter: TokenHourData_filter;
    Token_filter: Token_filter;
    Transaction: Transaction;
    Transaction_filter: Transaction_filter;
    User: User;
    User_filter: User_filter;
    _Block_: _Block_;
    _Meta_: _Meta_;
}>;
export declare type entityDirectiveArgs = {};
export declare type entityDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = entityDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export declare type subgraphIdDirectiveArgs = {
    id: Scalars['String'];
};
export declare type subgraphIdDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = subgraphIdDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export declare type derivedFromDirectiveArgs = {
    field: Scalars['String'];
};
export declare type derivedFromDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = derivedFromDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export interface BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigDecimal'], any> {
    name: 'BigDecimal';
}
export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
    name: 'BigInt';
}
export declare type BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Bundle'] = ResolversParentTypes['Bundle']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    ethPrice?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Burn'] = ResolversParentTypes['Burn']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    transaction?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Pair'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    sender?: Resolver<Maybe<ResolversTypes['Bytes']>, ParentType, ContextType>;
    amount0?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    amount1?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    to?: Resolver<Maybe<ResolversTypes['Bytes']>, ParentType, ContextType>;
    logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    amountUSD?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    feeTo?: Resolver<Maybe<ResolversTypes['Bytes']>, ParentType, ContextType>;
    feeLiquidity?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Bytes'], any> {
    name: 'Bytes';
}
export declare type DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DayData'] = ResolversParentTypes['DayData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Factory'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    untrackedVolume?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Factory'] = ResolversParentTypes['Factory']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    untrackedVolumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pairs?: Resolver<Array<ResolversTypes['Pair']>, ParentType, ContextType, RequireFields<FactorypairsArgs, 'skip' | 'first'>>;
    tokens?: Resolver<Array<ResolversTypes['Token']>, ParentType, ContextType, RequireFields<FactorytokensArgs, 'skip' | 'first'>>;
    hourData?: Resolver<Array<ResolversTypes['HourData']>, ParentType, ContextType, RequireFields<FactoryhourDataArgs, 'skip' | 'first'>>;
    dayData?: Resolver<Array<ResolversTypes['DayData']>, ParentType, ContextType, RequireFields<FactorydayDataArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HourData'] = ResolversParentTypes['HourData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Factory'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    untrackedVolume?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LiquidityPosition'] = ResolversParentTypes['LiquidityPosition']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Pair'], ParentType, ContextType>;
    liquidityTokenBalance?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    snapshots?: Resolver<Array<Maybe<ResolversTypes['LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
    block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LiquidityPositionSnapshot'] = ResolversParentTypes['LiquidityPositionSnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    liquidityPosition?: Resolver<ResolversTypes['LiquidityPosition'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Pair'], ParentType, ContextType>;
    token0PriceUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    token1PriceUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityTokenTotalSupply?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityTokenBalance?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Mint'] = ResolversParentTypes['Mint']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    transaction?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Pair'], ParentType, ContextType>;
    to?: Resolver<ResolversTypes['Bytes'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    sender?: Resolver<Maybe<ResolversTypes['Bytes']>, ParentType, ContextType>;
    amount0?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    amount1?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    amountUSD?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    feeTo?: Resolver<Maybe<ResolversTypes['Bytes']>, ParentType, ContextType>;
    feeLiquidity?: Resolver<Maybe<ResolversTypes['BigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Pair'] = ResolversParentTypes['Pair']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Factory'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    token0?: Resolver<ResolversTypes['Token'], ParentType, ContextType>;
    token1?: Resolver<ResolversTypes['Token'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    totalSupply?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserveETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    trackedReserveETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    token0Price?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    token1Price?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeToken0?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeToken1?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    untrackedVolumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidityPositions?: Resolver<Array<ResolversTypes['LiquidityPosition']>, ParentType, ContextType, RequireFields<PairliquidityPositionsArgs, 'skip' | 'first'>>;
    liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
    dayData?: Resolver<Array<ResolversTypes['PairDayData']>, ParentType, ContextType, RequireFields<PairdayDataArgs, 'skip' | 'first'>>;
    hourData?: Resolver<Array<ResolversTypes['PairHourData']>, ParentType, ContextType, RequireFields<PairhourDataArgs, 'skip' | 'first'>>;
    mints?: Resolver<Array<ResolversTypes['Mint']>, ParentType, ContextType, RequireFields<PairmintsArgs, 'skip' | 'first'>>;
    burns?: Resolver<Array<ResolversTypes['Burn']>, ParentType, ContextType, RequireFields<PairburnsArgs, 'skip' | 'first'>>;
    swaps?: Resolver<Array<ResolversTypes['Swap']>, ParentType, ContextType, RequireFields<PairswapsArgs, 'skip' | 'first'>>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PairDayData'] = ResolversParentTypes['PairDayData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Pair'], ParentType, ContextType>;
    token0?: Resolver<ResolversTypes['Token'], ParentType, ContextType>;
    token1?: Resolver<ResolversTypes['Token'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    totalSupply?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeToken0?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeToken1?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PairHourData'] = ResolversParentTypes['PairHourData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Pair'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeToken0?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeToken1?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
    user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryuserArgs, 'id' | 'subgraphError'>>;
    users?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryusersArgs, 'skip' | 'first' | 'subgraphError'>>;
    bundle?: Resolver<Maybe<ResolversTypes['Bundle']>, ParentType, ContextType, RequireFields<QuerybundleArgs, 'id' | 'subgraphError'>>;
    bundles?: Resolver<Array<ResolversTypes['Bundle']>, ParentType, ContextType, RequireFields<QuerybundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
    factory?: Resolver<Maybe<ResolversTypes['Factory']>, ParentType, ContextType, RequireFields<QueryfactoryArgs, 'id' | 'subgraphError'>>;
    factories?: Resolver<Array<ResolversTypes['Factory']>, ParentType, ContextType, RequireFields<QueryfactoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
    hourData?: Resolver<Maybe<ResolversTypes['HourData']>, ParentType, ContextType, RequireFields<QueryhourDataArgs, 'id' | 'subgraphError'>>;
    hourDatas?: Resolver<Array<ResolversTypes['HourData']>, ParentType, ContextType, RequireFields<QueryhourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    dayData?: Resolver<Maybe<ResolversTypes['DayData']>, ParentType, ContextType, RequireFields<QuerydayDataArgs, 'id' | 'subgraphError'>>;
    dayDatas?: Resolver<Array<ResolversTypes['DayData']>, ParentType, ContextType, RequireFields<QuerydayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    token?: Resolver<Maybe<ResolversTypes['Token']>, ParentType, ContextType, RequireFields<QuerytokenArgs, 'id' | 'subgraphError'>>;
    tokens?: Resolver<Array<ResolversTypes['Token']>, ParentType, ContextType, RequireFields<QuerytokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    tokenHourData?: Resolver<Maybe<ResolversTypes['TokenHourData']>, ParentType, ContextType, RequireFields<QuerytokenHourDataArgs, 'id' | 'subgraphError'>>;
    tokenHourDatas?: Resolver<Array<ResolversTypes['TokenHourData']>, ParentType, ContextType, RequireFields<QuerytokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    tokenDayData?: Resolver<Maybe<ResolversTypes['TokenDayData']>, ParentType, ContextType, RequireFields<QuerytokenDayDataArgs, 'id' | 'subgraphError'>>;
    tokenDayDatas?: Resolver<Array<ResolversTypes['TokenDayData']>, ParentType, ContextType, RequireFields<QuerytokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    pair?: Resolver<Maybe<ResolversTypes['Pair']>, ParentType, ContextType, RequireFields<QuerypairArgs, 'id' | 'subgraphError'>>;
    pairs?: Resolver<Array<ResolversTypes['Pair']>, ParentType, ContextType, RequireFields<QuerypairsArgs, 'skip' | 'first' | 'subgraphError'>>;
    pairHourData?: Resolver<Maybe<ResolversTypes['PairHourData']>, ParentType, ContextType, RequireFields<QuerypairHourDataArgs, 'id' | 'subgraphError'>>;
    pairHourDatas?: Resolver<Array<ResolversTypes['PairHourData']>, ParentType, ContextType, RequireFields<QuerypairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    pairDayData?: Resolver<Maybe<ResolversTypes['PairDayData']>, ParentType, ContextType, RequireFields<QuerypairDayDataArgs, 'id' | 'subgraphError'>>;
    pairDayDatas?: Resolver<Array<ResolversTypes['PairDayData']>, ParentType, ContextType, RequireFields<QuerypairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    liquidityPosition?: Resolver<Maybe<ResolversTypes['LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryliquidityPositionArgs, 'id' | 'subgraphError'>>;
    liquidityPositions?: Resolver<Array<ResolversTypes['LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryliquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryliquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
    liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryliquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    transaction?: Resolver<Maybe<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<QuerytransactionArgs, 'id' | 'subgraphError'>>;
    transactions?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<QuerytransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    mint?: Resolver<Maybe<ResolversTypes['Mint']>, ParentType, ContextType, RequireFields<QuerymintArgs, 'id' | 'subgraphError'>>;
    mints?: Resolver<Array<ResolversTypes['Mint']>, ParentType, ContextType, RequireFields<QuerymintsArgs, 'skip' | 'first' | 'subgraphError'>>;
    burn?: Resolver<Maybe<ResolversTypes['Burn']>, ParentType, ContextType, RequireFields<QueryburnArgs, 'id' | 'subgraphError'>>;
    burns?: Resolver<Array<ResolversTypes['Burn']>, ParentType, ContextType, RequireFields<QueryburnsArgs, 'skip' | 'first' | 'subgraphError'>>;
    swap?: Resolver<Maybe<ResolversTypes['Swap']>, ParentType, ContextType, RequireFields<QueryswapArgs, 'id' | 'subgraphError'>>;
    swaps?: Resolver<Array<ResolversTypes['Swap']>, ParentType, ContextType, RequireFields<QueryswapsArgs, 'skip' | 'first' | 'subgraphError'>>;
    tokenSearch?: Resolver<Array<ResolversTypes['Token']>, ParentType, ContextType, RequireFields<QuerytokenSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
    pairSearch?: Resolver<Array<ResolversTypes['Pair']>, ParentType, ContextType, RequireFields<QuerypairSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
    userSearch?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryuserSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
    _meta?: Resolver<Maybe<ResolversTypes['_Meta_']>, ParentType, ContextType, Partial<Query_metaArgs>>;
}>;
export declare type SubscriptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
    user?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "user", ParentType, ContextType, RequireFields<SubscriptionuserArgs, 'id' | 'subgraphError'>>;
    users?: SubscriptionResolver<Array<ResolversTypes['User']>, "users", ParentType, ContextType, RequireFields<SubscriptionusersArgs, 'skip' | 'first' | 'subgraphError'>>;
    bundle?: SubscriptionResolver<Maybe<ResolversTypes['Bundle']>, "bundle", ParentType, ContextType, RequireFields<SubscriptionbundleArgs, 'id' | 'subgraphError'>>;
    bundles?: SubscriptionResolver<Array<ResolversTypes['Bundle']>, "bundles", ParentType, ContextType, RequireFields<SubscriptionbundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
    factory?: SubscriptionResolver<Maybe<ResolversTypes['Factory']>, "factory", ParentType, ContextType, RequireFields<SubscriptionfactoryArgs, 'id' | 'subgraphError'>>;
    factories?: SubscriptionResolver<Array<ResolversTypes['Factory']>, "factories", ParentType, ContextType, RequireFields<SubscriptionfactoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
    hourData?: SubscriptionResolver<Maybe<ResolversTypes['HourData']>, "hourData", ParentType, ContextType, RequireFields<SubscriptionhourDataArgs, 'id' | 'subgraphError'>>;
    hourDatas?: SubscriptionResolver<Array<ResolversTypes['HourData']>, "hourDatas", ParentType, ContextType, RequireFields<SubscriptionhourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    dayData?: SubscriptionResolver<Maybe<ResolversTypes['DayData']>, "dayData", ParentType, ContextType, RequireFields<SubscriptiondayDataArgs, 'id' | 'subgraphError'>>;
    dayDatas?: SubscriptionResolver<Array<ResolversTypes['DayData']>, "dayDatas", ParentType, ContextType, RequireFields<SubscriptiondayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    token?: SubscriptionResolver<Maybe<ResolversTypes['Token']>, "token", ParentType, ContextType, RequireFields<SubscriptiontokenArgs, 'id' | 'subgraphError'>>;
    tokens?: SubscriptionResolver<Array<ResolversTypes['Token']>, "tokens", ParentType, ContextType, RequireFields<SubscriptiontokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['TokenHourData']>, "tokenHourData", ParentType, ContextType, RequireFields<SubscriptiontokenHourDataArgs, 'id' | 'subgraphError'>>;
    tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['TokenHourData']>, "tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptiontokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['TokenDayData']>, "tokenDayData", ParentType, ContextType, RequireFields<SubscriptiontokenDayDataArgs, 'id' | 'subgraphError'>>;
    tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['TokenDayData']>, "tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptiontokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    pair?: SubscriptionResolver<Maybe<ResolversTypes['Pair']>, "pair", ParentType, ContextType, RequireFields<SubscriptionpairArgs, 'id' | 'subgraphError'>>;
    pairs?: SubscriptionResolver<Array<ResolversTypes['Pair']>, "pairs", ParentType, ContextType, RequireFields<SubscriptionpairsArgs, 'skip' | 'first' | 'subgraphError'>>;
    pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['PairHourData']>, "pairHourData", ParentType, ContextType, RequireFields<SubscriptionpairHourDataArgs, 'id' | 'subgraphError'>>;
    pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['PairHourData']>, "pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionpairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['PairDayData']>, "pairDayData", ParentType, ContextType, RequireFields<SubscriptionpairDayDataArgs, 'id' | 'subgraphError'>>;
    pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['PairDayData']>, "pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionpairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['LiquidityPosition']>, "liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionliquidityPositionArgs, 'id' | 'subgraphError'>>;
    liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['LiquidityPosition']>, "liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionliquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['LiquidityPositionSnapshot']>, "liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionliquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
    liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['LiquidityPositionSnapshot']>, "liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionliquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    transaction?: SubscriptionResolver<Maybe<ResolversTypes['Transaction']>, "transaction", ParentType, ContextType, RequireFields<SubscriptiontransactionArgs, 'id' | 'subgraphError'>>;
    transactions?: SubscriptionResolver<Array<ResolversTypes['Transaction']>, "transactions", ParentType, ContextType, RequireFields<SubscriptiontransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    mint?: SubscriptionResolver<Maybe<ResolversTypes['Mint']>, "mint", ParentType, ContextType, RequireFields<SubscriptionmintArgs, 'id' | 'subgraphError'>>;
    mints?: SubscriptionResolver<Array<ResolversTypes['Mint']>, "mints", ParentType, ContextType, RequireFields<SubscriptionmintsArgs, 'skip' | 'first' | 'subgraphError'>>;
    burn?: SubscriptionResolver<Maybe<ResolversTypes['Burn']>, "burn", ParentType, ContextType, RequireFields<SubscriptionburnArgs, 'id' | 'subgraphError'>>;
    burns?: SubscriptionResolver<Array<ResolversTypes['Burn']>, "burns", ParentType, ContextType, RequireFields<SubscriptionburnsArgs, 'skip' | 'first' | 'subgraphError'>>;
    swap?: SubscriptionResolver<Maybe<ResolversTypes['Swap']>, "swap", ParentType, ContextType, RequireFields<SubscriptionswapArgs, 'id' | 'subgraphError'>>;
    swaps?: SubscriptionResolver<Array<ResolversTypes['Swap']>, "swaps", ParentType, ContextType, RequireFields<SubscriptionswapsArgs, 'skip' | 'first' | 'subgraphError'>>;
    _meta?: SubscriptionResolver<Maybe<ResolversTypes['_Meta_']>, "_meta", ParentType, ContextType, Partial<Subscription_metaArgs>>;
}>;
export declare type SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Swap'] = ResolversParentTypes['Swap']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    transaction?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Pair'], ParentType, ContextType>;
    sender?: Resolver<ResolversTypes['Bytes'], ParentType, ContextType>;
    amount0In?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    amount1In?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    amount0Out?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    amount1Out?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    to?: Resolver<ResolversTypes['Bytes'], ParentType, ContextType>;
    logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Token'] = ResolversParentTypes['Token']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Factory'], ParentType, ContextType>;
    symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    volume?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    untrackedVolumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    derivedETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    hourData?: Resolver<Array<ResolversTypes['TokenHourData']>, ParentType, ContextType, RequireFields<TokenhourDataArgs, 'skip' | 'first'>>;
    dayData?: Resolver<Array<ResolversTypes['TokenDayData']>, ParentType, ContextType, RequireFields<TokendayDataArgs, 'skip' | 'first'>>;
    basePairs?: Resolver<Array<ResolversTypes['Pair']>, ParentType, ContextType, RequireFields<TokenbasePairsArgs, 'skip' | 'first'>>;
    quotePairs?: Resolver<Array<ResolversTypes['Pair']>, ParentType, ContextType, RequireFields<TokenquotePairsArgs, 'skip' | 'first'>>;
    basePairsDayData?: Resolver<Array<ResolversTypes['PairDayData']>, ParentType, ContextType, RequireFields<TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
    quotePairsDayData?: Resolver<Array<ResolversTypes['PairDayData']>, ParentType, ContextType, RequireFields<TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TokenDayData'] = ResolversParentTypes['TokenDayData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    token?: Resolver<ResolversTypes['Token'], ParentType, ContextType>;
    volume?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    priceUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TokenHourData'] = ResolversParentTypes['TokenHourData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    token?: Resolver<ResolversTypes['Token'], ParentType, ContextType>;
    volume?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    priceUSD?: Resolver<ResolversTypes['BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Transaction'] = ResolversParentTypes['Transaction']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    mints?: Resolver<Array<Maybe<ResolversTypes['Mint']>>, ParentType, ContextType, RequireFields<TransactionmintsArgs, 'skip' | 'first'>>;
    burns?: Resolver<Array<Maybe<ResolversTypes['Burn']>>, ParentType, ContextType, RequireFields<TransactionburnsArgs, 'skip' | 'first'>>;
    swaps?: Resolver<Array<Maybe<ResolversTypes['Swap']>>, ParentType, ContextType, RequireFields<TransactionswapsArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    liquidityPositions?: Resolver<Array<ResolversTypes['LiquidityPosition']>, ParentType, ContextType, RequireFields<UserliquidityPositionsArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type _Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['_Block_'] = ResolversParentTypes['_Block_']> = ResolversObject<{
    hash?: Resolver<Maybe<ResolversTypes['Bytes']>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type _Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['_Meta_'] = ResolversParentTypes['_Meta_']> = ResolversObject<{
    block?: Resolver<ResolversTypes['_Block_'], ParentType, ContextType>;
    deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Resolvers<ContextType = MeshContext> = ResolversObject<{
    BigDecimal?: GraphQLScalarType;
    BigInt?: GraphQLScalarType;
    Bundle?: BundleResolvers<ContextType>;
    Burn?: BurnResolvers<ContextType>;
    Bytes?: GraphQLScalarType;
    DayData?: DayDataResolvers<ContextType>;
    Factory?: FactoryResolvers<ContextType>;
    HourData?: HourDataResolvers<ContextType>;
    LiquidityPosition?: LiquidityPositionResolvers<ContextType>;
    LiquidityPositionSnapshot?: LiquidityPositionSnapshotResolvers<ContextType>;
    Mint?: MintResolvers<ContextType>;
    Pair?: PairResolvers<ContextType>;
    PairDayData?: PairDayDataResolvers<ContextType>;
    PairHourData?: PairHourDataResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
    Subscription?: SubscriptionResolvers<ContextType>;
    Swap?: SwapResolvers<ContextType>;
    Token?: TokenResolvers<ContextType>;
    TokenDayData?: TokenDayDataResolvers<ContextType>;
    TokenHourData?: TokenHourDataResolvers<ContextType>;
    Transaction?: TransactionResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
    _Block_?: _Block_Resolvers<ContextType>;
    _Meta_?: _Meta_Resolvers<ContextType>;
}>;
export declare type DirectiveResolvers<ContextType = MeshContext> = ResolversObject<{
    entity?: entityDirectiveResolver<any, any, ContextType>;
    subgraphId?: subgraphIdDirectiveResolver<any, any, ContextType>;
    derivedFrom?: derivedFromDirectiveResolver<any, any, ContextType>;
}>;
export declare type MeshContext = LegacyTypes.Context & BaseMeshContext;
export declare const rawServeConfig: YamlConfig.Config['serve'];
export declare function getMeshOptions(): Promise<GetMeshOptions>;
export declare function createBuiltMeshHTTPHandler(): MeshHTTPHandler<MeshContext>;
export declare function getBuiltGraphClient(): Promise<MeshInstance>;
export declare const execute: ExecuteMeshFn;
export declare const subscribe: SubscribeMeshFn;
export declare function getBuiltGraphSDK<TGlobalContext = any, TOperationContext = any>(globalContext?: TGlobalContext): {
    getLiquidityPositions(variables?: Exact<{
        skip?: number;
        first?: number;
        where?: LiquidityPosition_filter;
    }>, options?: TOperationContext): Promise<getLiquidityPositionsQuery>;
};
export declare type getLiquidityPositionsQueryVariables = Exact<{
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    where?: InputMaybe<LiquidityPosition_filter>;
}>;
export declare type getLiquidityPositionsQuery = {
    liquidityPositions: Array<Pick<LiquidityPosition, 'id'>>;
};
export declare const getLiquidityPositionsDocument: DocumentNode<getLiquidityPositionsQuery, Exact<{
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    where?: InputMaybe<LiquidityPosition_filter>;
}>>;
export declare type Requester<C = {}, E = unknown> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>;
export declare function getSdk<C, E>(requester: Requester<C, E>): {
    getLiquidityPositions(variables?: getLiquidityPositionsQueryVariables, options?: C): Promise<getLiquidityPositionsQuery>;
};
export declare type Sdk = ReturnType<typeof getSdk>;
